
Good Morning All

Welcome to Advanced Shell Script Session - DAY1
           =====================
My self Palani Karthikeyan ( call : Karthik ) - Trainer
	======================================


We will start session @ 9:30 AM IST
		     ---------------
#################################################################

About Shell & Types

SubShell 

Script
-------
 |->Variables
	|->1.User defined variable
	|->2.Shell variable
	|->3.Commandline args
	|->4.Array
 |->Operators
	|->1.arithmetic
	|->2.relational
	|->3.logical
	|->4.file test
	|->5.regx (optional)

|->Conditional statements
	|->1. if condition - i)if only ii)if else iii) if elif
	|->2. case statement

|->Looping statements
	|->1. Conditional style
	|->2. Collection

|->File Handling 

|->Function 
	|->simple functionCall, with args,scope,loadable script

|->Regular Expression(grep;sed;awk)

|->sed + Regx
    |->print,delete,substitute,change,insert,append,execute..

|->awk + Regx
   ---
     |--> commandline filter
     |--> awk script
		|->supports floating point operation
		|->report generation

|->Here document 
	|->SSH,DataBase,External Scripts(perl,python..)
-------------------------------------------------------------------------------------- 
      
OS
---
 |->System software(program)
 |->Interface between user and H/w

 |->Core part of an OS is -> Kernel


  +---------------+
  | User: Appln
  +---------------+
  | Kernel 
  +---------------+
  | H/W: CPU RAM HD ..
  +---------------+

 Kernel -> File, Process

 File -> Data - Under the Storage device
 Process -> Data - Under the CPU


User:  gcc javac sql vi  commandline task etc.,
 --------------------## SHELL ##-----------------------------------
	system call() = FD (FD ->File Descriptor)
	|		  _______________________
	Filesystem<--->PCB| IPC;SCHED;Net;Memory|
	|
	Device Driver # kernel object file( .ko) 
	|
	Device Controller
	|
--------------------------------------------------------
H/W: CPU RAM	HD IO NIC ..  



date <= command - from user view
----
 |---<---- File, Process - from Kernel view


root@host~]# date <== user
....		|
		|
		open()
		read()
		write(1,...date command results)
		..
		close()
		-----------//systemCalls


strace <command> {Enter}

systemCall() = 0  <STDIN>
systemCall() = 1 STDOUT  - display correct results to monitor 
systemCall() = 2 STDERR  - display error message to monitor
|
systemCall() = 0x12345 <== memory relatedCall
|
systemcall() = 3 to 2 pow 32/64 <== ValidCalls
|
systemcall() = -1 <== FailedCall


command >result  ---same as-> command 1>result

command 2>err.log
-------	|_______________STDERR
 |->error message

	
command >result.log 2>err.log
| |	   |		|
|Success ---		|
|		        |
Failed--------->--------|				

		Vs

command >result_File 2>&1
---------------------------
   |->Redirect command success and failed both message to common log file



[root@krosumlabs AdVShellScript]# date
Mon Feb  3 10:12:52 IST 2025
[root@krosumlabs AdVShellScript]# ls
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# clear
[root@krosumlabs AdVShellScript]# ls
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# date >r1.log
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# date 1>r2.log
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# date 2>r3.log
Mon Feb  3 10:13:54 IST 2025
[root@krosumlabs AdVShellScript]# cat r1.log
Mon Feb  3 10:13:25 IST 2025
[root@krosumlabs AdVShellScript]# cat r2.log
Mon Feb  3 10:13:33 IST 2025
[root@krosumlabs AdVShellScript]# cat r3.log
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# datee
-bash: datee: command not found
[root@krosumlabs AdVShellScript]# datee >r4.log
-bash: datee: command not found
[root@krosumlabs AdVShellScript]# cat r4.log
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# datee 2>r5.log
[root@krosumlabs AdVShellScript]# cat r5.log
-bash: datee: command not found
[root@krosumlabs AdVShellScript]# date >result.log 2>err.log
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# cat result.log
Mon Feb  3 10:15:56 IST 2025
[root@krosumlabs AdVShellScript]# dasdfsdte >result.log 2>err.log
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# cat err.log
-bash: dasdfsdte: command not found
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# date >r6.log 2>&1
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# cat r6.log
Mon Feb  3 10:16:44 IST 2025
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# dasdfsdte >r6.log 2>&1
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# cat r6.log
-bash: dasdfsdte: command not found
[root@krosumlabs AdVShellScript]# uname >>r6.log 2>&1
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# ps >>r6.log 2>&1
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# monitor >>r6.log 2>&1
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# cat r6.log
-bash: dasdfsdte: command not found
Linux
  PID TTY          TIME CMD
 1317 pts/0    00:00:00 bash
 1361 pts/0    00:00:00 ps
-bash: monitor: command not found
[root@krosumlabs AdVShellScript]#

##############################################################################

Types of shell
--------------
1. BoureShell -> sh 
2. KornShell  -> ksh  ->ksh93 
|
3. CSHell ->csh  ->tcsh ->expect ...
|
4. BourneAgainSHell (BASH)  - GNU Project
			|
			|->default shell in any distribution of linux


cat /etc/shells <== list of available shells


To test current working shell
In Commandline
-----------------
1)  ps 
   (or)
2)  echo $0   # another way
	  |
	  |--> current working shellname

----------------------------------------------------------------------
Subshell  - like a subprocess (new process)
----------

root@host~]# echo $0 
-bash <== current working shell

root@host~]# cat /etc/shells  
....
.... <== list of available shells

root@host~]# sh {Enter} 
sh-4.2# 
sh-4.2#  <command>	
-------		|__________________new process(child)
 |->sh shell primary prompt
sh-4.2#
sh-4.2# exit

root@host~]# echo $0
-bash

root@host~]# ./p1.sh {Enter}

|
new subshell(subprocess)
		|
		Code will get execute in subshell
		|
		exit - then subshell will get closed
######################################################################################

Linux Boot process 

OFF =>Switch ON PC -> POST  ->MasterBootRecord ->Bootloader ->load the kernel ->process 
		      ----							|
										(A)
(A) ->systemd(PID=1)
	 |
	...(?)
	...
	login(?) (or) getty(?) # login window  (Username:_______
					       (password:_______ 
	 |
	 |
	shell (CLI)	Vs  Desktop (GUI)
	 |			|
	User IO	  (user process)
######################################################################################

[root@krosumlabs AdVShellScript]# whatis pmap
pmap (1)             - report memory map of a process
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# whatis sysctl
sysctl (8)           - configure kernel parameters at runtime
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# man sysctl
[root@krosumlabs AdVShellScript]#
######################################################################################

Linux Commandline 
----------------------
1. Command Only style (ex:  root@host~]# uname
					 date
					 ls
					 ps
					.. )


2. Command with arguments
   ex: root@host~]# uname -r
		    date +%D
		    ls -l
		    ls -l /etc/passwd  /etc/hosts  /var/log/boot.log 

		    echo "Hello Linux World"  - Single argument
		    echo  Hello Linux World   - Multiple arguments
			..


3. Command with argument is another command
		
ex: root@host~]# echo "Today:date +%D"
		 ----  ---------------- //command with argument


ex: root@host~]# echo "Today:`date +%D`"
		 ----  ----------------//command with another `command`

	
echo "Today:`date +%D`"  (or)   echo "Today:$(date +%D)"
----------------------------------------------------------------------------------
 |->Variables
    |->1.User defined variable

variable is a namespace - holding a value
--------

variableName=Value
^^^^^^^^^^^^
|
|->variable name starts with a-zA-Z_ 
|->not starts with digits
|->variable name not allows space and specialchars

|->There is no space in = LHS,RHS


myserver="Oracle Linux 8.3"
	|
        There is no space

count=`ps -e|wc -l`  (or)  count=$(ps -e|wc -l)
      |___________|              |____________|

 

#################################################

Task:

initialize a file name /etc/passwd to user defined variable
|
use ls -l <variable> display file details
|
use stat <variable> display file attributes

Fname="/etc/passwd"

echo "About $Fname details:-
------------------------------"

ls -l $Fname
echo # Empty 
echo "About $Fname attributes are:-
-------------------------------------"
stat $Fname
------------------------------------------------------

------------------------------------------------


	  				    echo
Keyboard(<STDIN>) ----<----- ShellScript-------->----Monitor(STOUT)
		      read

Syntax:-
----------
read UserdefinedVariable


echo "Enter your name:"
read name  # interface to keyboard	Vs    name="userA" <== initialization
echo "Hello...$name"

		Vs
read -p "prompt message:"<space>UserdefinedVariable

read -p "Enter your name:" name
echo "Hello..$name"

####
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# read name
userA
[root@krosumlabs AdVShellScript]# echo $name
userA
[root@krosumlabs AdVShellScript]# read name
Ram
[root@krosumlabs AdVShellScript]# echo $name
Ram
[root@krosumlabs AdVShellScript]# read name
Leo
[root@krosumlabs AdVShellScript]# echo $name
Leo
[root@krosumlabs AdVShellScript]# read -p "Enter a user name:" name
Enter a user name:userA
[root@krosumlabs AdVShellScript]# echo $name
userA
[root@krosumlabs AdVShellScript]# read -p "Enter $name working dept:" dept
Enter userA working dept:sales
[root@krosumlabs AdVShellScript]# echo "person $name working dept is:$dept"
person userA working dept is:sales
[root@krosumlabs AdVShellScript]#


Task:

read a file name from keyboard
use ls -l <filename> - display file details

read -p "Enter a filename:" fname

echo "About $fname file details:-
=================================="

ls -l $fname
----------------------------------------------

Recap
------
How to initialize variable ?
How to initialize command results to variable?
How to take dynamic input from <STDIN>
How to multiline string 
---------------------------------------------------

Shell variable (or) env variable (or) exported  variable
---------------------------------------------------------
 |->global access



export variableName=Value    ->(1)

	<or>

 	variableName=Value
	export variableName 
	------------------------> (2)

env {Enter}
....
.... list of exported variables
-------------------------------------------------------------------------------

[root@krosumlabs AdVShellScript]# export Token="USDF@#$5"
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# sh
sh-4.2# echo $Token
USDF@#
sh-4.2# exit
exit
[root@krosumlabs AdVShellScript]# unset Token
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# echo $Token

[root@krosumlabs AdVShellScript]# unset myDB
[root@krosumlabs AdVShellScript]#
--------------------------------------------------------------------------------------
read UDV
export UDV=value
unset UDV
-----------------------------

 |->Operators
    |->1.arithmetic  + - * / %
	-----------
		|-> 1. expr command => expr <operand><SPACE><operator><SPACE><operand>
					    ------------------------------------------
		    2. compound style




[root@krosumlabs AdVShellScript]# echo 10 + 20
10 + 20
[root@krosumlabs AdVShellScript]# echo 10+20
10+20
[root@krosumlabs AdVShellScript]# expr 10 + 20
30
[root@krosumlabs AdVShellScript]# expr 10 - 20
-10
[root@krosumlabs AdVShellScript]# expr 10 / 20
0
[root@krosumlabs AdVShellScript]# expr 10 % 3
1
[root@krosumlabs AdVShellScript]# expr 10 * 3
expr: syntax error
[root@krosumlabs AdVShellScript]# expr 10 \* 3
30
[root@krosumlabs AdVShellScript]# echo "Hello"
Hello
[root@krosumlabs AdVShellScript]# echo \"Hello\"
"Hello"
[root@krosumlabs AdVShellScript]# expr 10+20
10+20
[root@krosumlabs AdVShellScript]# expr 10+ 20
expr: syntax error
[root@krosumlabs AdVShellScript]# v=`expr 10 + 20`
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# echo $v
30
[root@krosumlabs AdVShellScript]# expr 10 + 20.0
expr: non-integer argument
[root@krosumlabs AdVShellScript]# n=5
[root@krosumlabs AdVShellScript]# expr $n + 1
6
[root@krosumlabs AdVShellScript]# n=`expr $n + 1`
[root@krosumlabs AdVShellScript]# echo $n
6
[root@krosumlabs AdVShellScript]#

2. compound style
--------------------
$((expression))

|->supports ++/-- expression

|->won't support floating point operation


[root@krosumlabs AdVShellScript]# expr 10 + 20
30
[root@krosumlabs AdVShellScript]# echo $((10+20))
30
[root@krosumlabs AdVShellScript]# expr 10 +20
expr: syntax error
[root@krosumlabs AdVShellScript]# echo $((10+        20))
30
[root@krosumlabs AdVShellScript]# T1=`expr 10 + 20`
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# T2=$((10+20))
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# echo $T1 $T2
30 30
[root@krosumlabs AdVShellScript]# echo $((10*3))
30
[root@krosumlabs AdVShellScript]# va=10
[root@krosumlabs AdVShellScript]# vb=20
[root@krosumlabs AdVShellScript]# expr $va + $vb
30
[root@krosumlabs AdVShellScript]# echo $((va+vb))
30
[root@krosumlabs AdVShellScript]# n=5
[root@krosumlabs AdVShellScript]# n=`expr $n + 1`
[root@krosumlabs AdVShellScript]# echo $n
6
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# n=5
[root@krosumlabs AdVShellScript]# ((n++))
[root@krosumlabs AdVShellScript]# echo $n
6
[root@krosumlabs AdVShellScript]# echo $((--n))
5
[root@krosumlabs AdVShellScript]#

###############################################################################
Task:
------
Write a shell script
|
|-> read a filename from <STDIN>
|-> read a file size from <STDIN>
|-> read another file name and file size from <STDIN> 

|-> Calculate sum of two file size - initialize sum of two file size value to UDV

|-> Display - each file name - Size
		   total file size
---------------------------------------------------------------------

read -p "Enter a filename:" f1
read -p "Enter $f1 size:" s1

read -p "Enter a filename:" f2
read -p "Enter $f2 size:" s2

total=`expr $s1 + $s2`

echo "File name:$f1  Size:$s1
File name:$f2	Size:$s2
---------------------------------
Total File Size:$total 
---------------------------------"
#################################################################################

special variable  $?
-----------------------

 $? -> last command operation exit code
			      -----------

commandA
commandB
echo $?  -----> commandB exit code
commanC 

$? -> 0  Success

$? -> non-zero (1 2 3 .. 126 127..N) //Failed
--		

[root@krosumlabs AdVShellScript]# date
Mon Feb  3 12:55:54 IST 2025
[root@krosumlabs AdVShellScript]# echo $?
0
[root@krosumlabs AdVShellScript]# datee
-bash: datee: command not found
[root@krosumlabs AdVShellScript]# echo $?
127
[root@krosumlabs AdVShellScript]# cat r1.log
Mon Feb  3 10:13:25 IST 2025
[root@krosumlabs AdVShellScript]# echo $?
0
[root@krosumlabs AdVShellScript]# cat rr.log
cat: rr.log: No such file or directory
[root@krosumlabs AdVShellScript]# echo $?
1
[root@krosumlabs AdVShellScript]#

===================================================================================
Relational Operators
----------------------
	|
	|-->String "A-Za-z0-9spacespecialChar"
	    ----------------------------------
		== !=  < <= > >=
		
		login_name="`whoami`"  <== initialization

		$login_name == "root"  

		$login_name != "root"
	

	 |-->Numerical 
	     ----------
	      -eq  -ne   -lt   -le   -gt   -ge
	       
		user_id=`id -u`

		$user_id -eq 0
		
		$user_id -ne 0 


	`ps -e|wc -l`  -gt 100 <== Test Total number of process count is above 100	
        ------------  ==== 

####################################################################################

test operator 
--------------
test <or> []

[<space>Expression<space>]  (or) test<space>Expression

[root@krosumlabs AdVShellScript]# clear
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# id -u
0
[root@krosumlabs AdVShellScript]# 150 -gt 100
-bash: 150: command not found
[root@krosumlabs AdVShellScript]# test 150 -gt 100
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# test 150 -lt 100
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# test 150 -gt 100
[root@krosumlabs AdVShellScript]# echo $?
0
[root@krosumlabs AdVShellScript]# test 150 -lt 100
[root@krosumlabs AdVShellScript]# echo $?
1
[root@krosumlabs AdVShellScript]# [ 150 -gt 100 ]
[root@krosumlabs AdVShellScript]# echo $?
0
[root@krosumlabs AdVShellScript]# [ 150 -lt 100 ]
[root@krosumlabs AdVShellScript]# echo $?
1
[root@krosumlabs AdVShellScript]# id -u
0
[root@krosumlabs AdVShellScript]# [ `id -u` -eq 0 ]
[root@krosumlabs AdVShellScript]# echo $?
0
[root@krosumlabs AdVShellScript]# [ `id -u` -ne 0 ]
[root@krosumlabs AdVShellScript]# echo $?
1
[root@krosumlabs AdVShellScript]# ps -e|wc -l
105
[root@krosumlabs AdVShellScript]# [ `ps -e|wc -l` -gt 100 ]
[root@krosumlabs AdVShellScript]# echo $?
0
[root@krosumlabs AdVShellScript]# whoami
root
[root@krosumlabs AdVShellScript]# [ `whoami` == "root" ]
[root@krosumlabs AdVShellScript]# echo $?
0
[root@krosumlabs AdVShellScript]#
###############################################################################
Conditional statement
----------------------
 |->Code Block - execute only one time

 |->if statement
    -----------

 i) if only
=============
 if<space>[ Expression ]
 then
	<True block>
 fi

 ii) if else
===============
if<space>[ Expression ]
then
      True Block
else
      False Block
fi

iii) if elif elif ...elif else
===============================
if<space>[ Condition1 ]
then
	True block1
elif<space>[ Condition2 ]
then
	True block2
elif<space>[ Condition3 ]
then
	True block3

..
elif<space>[ ConditionN ]
then
	True blockN
else
	False block
fi
-----------------------------------------------------------------------------
[root@krosumlabs AdVShellScript]# cat -n p8
     1
     2  read -p "Enter a port number:" port
     3
     4  if [ $port -gt 500 ]
     5  then
     6     echo "Valid - input port $port is above 500"
     7  else
     8     echo "Invalid - input port $port is below 500"
     9  fi
    10
    11  read -p "Enter a app name:" app
    12  if [ "$app" == "Flask" ]
    13  then
    14     echo "Valid-Yes Input App is Flask"
    15  else
    16     echo "Sorry App $app is not matched"
    17  fi
    18
    19
[root@krosumlabs AdVShellScript]#

[root@krosumlabs AdVShellScript]# ./p8
Enter a port number:450
Invalid - input port 450 is below 500
Enter a app name:FastAPI
Sorry App FastAPI is not matched
[root@krosumlabs AdVShellScript]# bash -x p8
+ read -p 'Enter a port number:' port
Enter a port number:560
+ '[' 560 -gt 500 ']'
+ echo 'Valid - input port 560 is above 500'
Valid - input port 560 is above 500
+ read -p 'Enter a app name:' app
Enter a app name:FastAPI
+ '[' FastAPI == Flask ']'
+ echo 'Sorry App FastAPI is not matched'
Sorry App FastAPI is not matched
[root@krosumlabs AdVShellScript]#

############################################################################3

Task:
--------
Write a shell script
|
->read a disk partition name from <STDIN> (ex: /dev/xvdb1)
->read a disk size from <STDIN>		  (ex: 150)
|
->read another disk partition and size from <STDIN>
|
->Calculate sum of two disks 
|
->Display - each partition name - value
	    Sum of disk partition 

read -p "Enter a disk partition name:" p1
read -p "Enter $p1 size:" s1

read -p "Enter another disk partition name:" p2
read -p "Enter $p2 size:" s2

total=`expr $s1 + $s2`
echo "----------------
Partition $p1	  Size:$s1
Partition $p2	  Size:$s2
-----------------------------
	Total Size:$total
------------------------------"


-----------------------------------
Write a shell script

|-> read a shell name from <STDIN>
    test input shell is bash
	  |-> read an app name from <STDIN>
	  |-> Assign port number to app
    not a bash shell ->..
----------------------------------------------------

read -p "Enter a shell name:" shvar

if [ "$shvar" == "bash" ]
then
	read -p "Enter a app name:" app
	read -p "Enter a port number:" port
	web_app="$app:$port"
	echo "Web URL is:$web_app"
else
	echo "Sorry your input shell $shvar is not a bash"
fi


#####################################################################

Write a shell script
-----------------------
|-> read a shell name from <STDIN>
    |
   test1 -> test input shell name is bash ->initialize profile => /etc/bashrc
   test2 -> test input shell name is ksh ->initialize profile => /etc/kshrc
   test3 -> test input shell name is csh ->initialize profile => /etc/cshrc
   |
   default shell name is /bin/nologin  ->initialize profile => /etc/profile

 |-> display shell name and profile filename 
 

read -p "Enter a shell name:" shvar

if [ "$shvar" == "bash" ]
then
	fname="/etc/bashrc"
elif [ "$shvar" == "ksh" ]
then
	fname="/etc/kshrc"
elif [ "$shvar" == "csh" ]
then
	fname="/etc/cshrc"
else
	shvar="/bin/nologin"
	fname="/etc/profile"
fi

echo "Shell name:$shvar  Profile filename:$fname"

########################################################################################
Logical operators
-------------------
In Single Conditional statement, Test more than one condition // we can use 
logical operators

logical AND  ->   -a
logical OR   ->   -o
logical NOT  ->    !


test port number 501-599

if<space>[ $port -gt 500  -a $port -lt 600 ]
then
	...True block
else
	...False block
fi

test input shell bash <or> ksh //any one shell name is matched -->OK


if<space>[ $shVar == "bash"  -o  $shVar == "ksh" ]
then
	...True 
else
	...False
fi

----------------------
if ! [ condition ]
then
	..
fi
----------------------
Task:
------
Write a shell script		
  read a shell name from <STDIN>
  test input shell is bash
		|-> read an app name from <STDIN>
		|-> test inputApp name is flask <or> django //any one app name is matched		     |__ read a port Number from <STDIN>
				-----------
				 |__ test - input port range 501-500
				       |
				      display app name and running port number 
--------------------------------------------------------------------------------------
test operator
-------------
 [ ]

expanded test operator 
----------------------
 [[ ]]


[ "`whoami`" == "root" -a "$SHELL"  == "/bin/bash" -a `ps -e|wc -l` -gt 100 -a `lsmod|wc -l` -gt 200 ]
  ---------------------   -----------------------      =====================    ===================
	|_____________________________|				|_________________________|
			|_____________________________________________________|
						|
						Final Result
			->			->		->



[ "`whoami`" == "root" -a "$SHELL"  == "/bin/bash" ] -a [ `ps -e|wc -l` -gt 100 -a `lsmod|wc -l` -gt 200 ] 
-------------------------------------------------------------------------------------------------------------
						   # Error 


[ "`whoami`" == "root" -a "$SHELL"  == "/bin/bash" ] && [ `ps -e|wc -l` -gt 100 -a `lsmod|wc -l` -gt 200 ] 





[root@krosumlabs AdVShellScript]# [ 150 -gt 100 ] -a [ 150 -lt 100 ]
-bash: [: too many arguments
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# [ 150 -gt 100 ] -a [ 150 -lt 200 ]
-bash: [: too many arguments
[root@krosumlabs AdVShellScript]# [ 150 -gt 100 ] && [ 150 -lt 200 ]
[root@krosumlabs AdVShellScript]# echo $?
0
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# [ 150 -gt 100 -a 150 -lt 200 ]
[root@krosumlabs AdVShellScript]# echo $?
0
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# [ 150 -gt 100 && 150 -lt 200 ]
-bash: [: missing `]'
[root@krosumlabs AdVShellScript]# [[ 150 -gt 100 && 150 -lt 200 ]]
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# [[ 150 -gt 100 ]] && [[ 150 -lt 200 ]]
[root@krosumlabs AdVShellScript]#
[root@krosumlabs AdVShellScript]# [[ 150 -gt 100 -a 150 -lt 200 ]]
-bash: syntax error in conditional expression
-bash: syntax error near `-a'
[root@krosumlabs AdVShellScript]#



[ "`whoami`" == "root" -a "$SHELL"  == "/bin/bash" ] && [ `ps -e|wc -l` -gt 100 -a `lsmod|wc -l` -gt 200 ] 
//OK


[ "`whoami`" == "root" && "$SHELL"  == "/bin/bash" ] && [ `ps -e|wc -l` -gt 100 && `lsmod|wc -l` -gt 200 ] //Error


[[ "`whoami`" == "root" && "$SHELL"  == "/bin/bash" ]] && [[ `ps -e|wc -l` -gt 100 && `lsmod|wc -l` -gt 200 ]]
//OK
 
#################################################################################################

echo $? -> 0 (Success)


if [ 0 ]
then
	echo True  -> True
fi

if [ "" ] # like empty - there is no value
then
     echo "True"
else
     echo "False"  => False
fi			


 echo $?  -> 0 (Success)

	1 ->command is valid - operation is failed

	2 

	3 -> systemdaemon is not active
	
	..
	126 ->permission 
	127 ->command is not exists

[ $? -ne 0 ] ->failed
-----------------------------------------------------------------
Write a shell script
|
|-> read a system command from <STDIN>
    |
    -> execute a input command - redirect command results(STDOUT;STDERR) to external file
    |
    -> display input command execution status to monitor
						 -------

	read -p "Enter a linux command:" cmd
	$cmd >result.log 2>&1
	
	if [ $? -eq 0 ];then
	   echo "Yes - $cmd command execution is success"
	else
	   echo "No - $cmd command execution is failed"
	   echo "Refer result.log file"
	fi


------------------------------------------------------------------------------------------

Admin activity
----------------
1st validation -> script running user is root <or> not
						   ----
						     |->exit from script
						
  [ "`whoami`"  == "root" ]  ->(1)
	  <or>
  [ `id -u`  -eq 0 ]  ->(2)

	   <or>

[root@krosumlabs AdVShellScript]# echo $UID
0
[root@krosumlabs AdVShellScript]# id -u
0
[root@krosumlabs AdVShellScript]# [ `id -u` -eq 0 ];echo $?
0
[root@krosumlabs AdVShellScript]# [ $UID -eq 0 ] ;echo $?
0
[root@krosumlabs AdVShellScript]# [ "`whoami`" == "root" ] ;echo $?
0
[root@krosumlabs AdVShellScript]#



2nd -> exeucte admin command 
|
3rd -> redirect command(admin command) execution to external log file - append mode
	|
	update date/time

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

root@Host~]# at 18:00 {Enter}
at> ./backup.sh >/var/log/repo.log
at>
root@Host~]# atq
<job-ID> ....     # see the pending jobs

root@Host~]# systemctl status atd.service
Running 	       ------		
	
root@Host~]# systemctl start atd.service
----			
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

OL7 - yum 
OL[89] - dnf 

Debian - apt-get 
	 apt


if ! [ "`whoami`" == "root" ]
then
     echo "Usage: Sorry your not root user"
     exit 
fi

yum -y install at >>/var/log/repo.log 2>&1

if [ $? -eq 0 ];then
	echo "Installation is done"
	systemctl status atd >process.log 2>&1
	if [ $? -ne 0 ];then
		systemctl start atd
		if [ $? -eq 0 ];then
			echo "Success atd is active state"
		else
			echo "atd startup is failed"
		fi
	else
	    echo "Sorry daemon is not active"
	fi
else
	echo "Sorry package at installation is failed"
	echo "Refer /var/log/repo.log file"
	exit
fi		
###############################################################################################

[root@krosumlabs AdVShellScript]# cat p16

if ! [ "`whoami`" == "root" ]
then
     echo "Usage: Sorry your not root user"
     exit
fi
rpm -qa|grep -wq "at"
if [ $? -eq 0 ];then
        echo "Package at is already exists/installed"
        exit
else
        yum -y install at >>/var/log/repo.log 2>&1

        if [ $? -eq 0 ];then
                echo "Installation is done"
                systemctl status atd >process.log 2>&1
                if [ $? -ne 0 ];then
                        systemctl start atd
                        if [ $? -eq 0 ];then
                                echo "Success atd is active state"
                        else
                                echo "atd startup is failed"
                        fi
                else
                        echo "Sorry daemon is not active"
                fi
        else
                echo "Sorry package at installation is failed"
                echo "Refer /var/log/repo.log file"
                exit
        fi
fi
################################################################################################